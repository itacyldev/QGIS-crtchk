name: Build and Test
run-name: ${{ github.actor }} is running test 🚀
on: [ push ]
permissions:
  checks: write
jobs:
  Run-Unit-Test:
    runs-on: ubuntu-latest
    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - name: Prepare environment
        run: docker pull qgis/qgis:latest
      - name: Start testing-env container
        run: docker run -d -t --name qgis-testing -v  ${GITHUB_WORKSPACE}:/plugin_project qgis/qgis:latest
      - name: Setup virtual environment and install dependencies
        run: |
          docker exec -t qgis-testing sh -c "python3 -m venv /tmp/venv"
          docker exec -t qgis-testing sh -c "/tmp/venv/bin/python -m pip install unittest-xml-reporting coverage coverage-badge"
      - name: Run tests and Coverage in container
        run: |
          docker exec -t qgis-testing sh -c "cd /plugin_project && source /tmp/venv/bin/activate && python ./scripts/run_test.py"
          docker exec -t qgis-testing sh -c "cd /plugin_project && source /tmp/venv/bin/activate && python -m coverage xml -o build/coverage/report.xml"
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          report_paths: '**/build/test-results/TEST-*.xml'
          detailed_summary: true
          include_passed: true
      
      #      - name: Publish coverage
#        uses: orgoro/coverage@v3
#        with:
#            coverageFile: build/coverage/report.xml
#            token: ${{ secrets.GITHUB_TOKEN }}
#      - name: Coverage Badge
#        run: |
#          docker exec -t qgis-testing sh -c "cd /plugin_project;coverage-badge -f -o coverage.svg"
#          docker exec -t qgis-testing sh -c "cd /plugin_project;coverage-badge -f -o coverage.svg"
#      - name: Verify Changed files
#        uses: tj-actions/verify-changed-files@v12
#        id: changed_files
#        with:
#          files: coverage.svg
#      - name: Commit badge file
#        if: steps.changed_files.outputs.files_changed == 'true'
#        run: |
#          git status
#          git config user.name github-actions[bot]
#          git config user.email github-actions[bot]@users.noreply.github.com
#          git add -f coverage.svg
#          git commit -m "Updated coverage.svg"
      - run: echo "🍏 This job's status is ${{ job.status }}."